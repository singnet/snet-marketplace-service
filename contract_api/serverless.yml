plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-plugin-tracing
  - serverless-prune-plugin
  - serverless-aws-documentation

service: contract-api
provider:
  name: aws
  runtime: python3.7
  description: Description of what the lambda function does # optional, Description to publish to AWS
  memorySize: 512
  timeout: 30
  region: ${file(./config.${self:provider.stage}.json):REGION}
  stage: ${opt:stage,'dev'}
  deploymentBucket:
    name: snet-serverless-artifacts # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption
    tags: # Tags that will be added to each of the deployment resources
      key1: contract-api
  deploymentPrefix: serverless
  tracing: true

custom:
  pythonRequirements:
    fileName: contract_api/requirements.txt
    dockerizePip: true
    useDownloadCache: true
    useStaticCache: true
    cacheLocation: "/var/cache/serverless"
  prune:
    automatic: true
    includeLayers: true
    number: 2
  documentation:
    models:
      -
        name: "ErrorMessage"
        contentType: "application/json"
        schema: ${file(contract_api/documentation/models/error.json)}
      -
        name: "GetAllGroupForOrgOutput"
        contentType: "application/json"
        schema: ${file(contract_api/documentation/models/get_all_group_for_org.json):GetAllGroupForOrgOutput}
      -
        name: "GetAllOrgOutput"
        contentType: "application/json"
        schema: ${file(contract_api/documentation/models/get_all_org.json):GetAllOrgOutput}
      -
        name: "GetChannelOutput"
        contentType: "application/json"
        schema: ${file(contract_api/documentation/models/get_channel.json):GetChannelOutput}
      -
        name: "GetChannelsForGroupOutput"
        contentType: "application/json"
        schema: ${file(contract_api/documentation/models/get_channels_for_group.json):GetChannelsForGroupOutput}
      -
        name: "GetChannelsOldApiOutput"
        contentType: "application/json"
        schema: ${file(contract_api/documentation/models/get_channels_old_api.json):GetChannelsOldApiOutput}
      -
        name: "GetGroupForOrgIdOutput"
        contentType: "application/json"
        schema: ${file(contract_api/documentation/models/get_group_for_org_id.json):GetGroupForOrgIdOutput}
      -
        name: "GetGroupForServiceOutput"
        contentType: "application/json"
        schema: ${file(contract_api/documentation/models/get_group_for_service.json):GetGroupForServiceOutput}
      -
        name: "GetOrgForOrgIdOutput"
        contentType: "application/json"
        schema: ${file(contract_api/documentation/models/get_org_for_org_id.json):GetOrgForOrgIdOutput}
      -
        name: "GetServiceForGivenOrgOutput"
        contentType: "application/json"
        schema: ${file(contract_api/documentation/models/get_service_for_given_org.json):GetServiceForGivenOrgOutput}
      -
        name: "GetServiceForGivenOrgInput"
        contentType: "application/json"
        schema: ${file(contract_api/documentation/models/get_service_for_given_org.json):GetServiceForGivenOrgInput}
      -
        name: "GetServiceGetOutput"
        contentType: "application/json"
        schema: ${file(contract_api/documentation/models/get_service_get.json):GetServiceGetOutput}
      -
        name: "GetServicePostOutput"
        contentType: "application/json"
        schema: ${file(contract_api/documentation/models/get_service_post.json):GetServicePostOutput}
      -
        name: "GetServicePostInput"
        contentType: "application/json"
        schema: ${file(contract_api/documentation/models/get_service_post.json):GetServicePostInput}
      -
        name: "PostRatingForGivenServiceOutput"
        contentType: "application/json"
        schema: ${file(contract_api/documentation/models/post_rating_for_given_service.json):PostRatingForGivenServiceOutput}
      -
        name: "ServiceCurationOutput"
        contentType: "application/json"
        schema: ${file(contract_api/documentation/models/service_curation.json):ServiceCurationOutput}
      -
        name: "UpdateConsumedBalanceOutput"
        contentType: "application/json"
        schema: ${file(contract_api/documentation/models/update_consumed_balance.json):UpdateConsumedBalanceOutput}
      -
        name: "UpdateConsumedBalanceInput"
        contentType: "application/json"
        schema: ${file(contract_api/documentation/models/update_consumed_balance.json):UpdateConsumedBalanceInput}
      -
        name: "MarketplaceCarousel"
        contentType: "application/json"
        schema: ${file(contract_api/documentation/models/get_marketplace_carousel.json):MarketplaceCarouselOutput}

package:
  exclude:
    - .circleci/**
    - .gitignore/**
    - .serverless/**
    - requirements.txt
    - venv/**
    - config.ropsten.json
    - sls_deploy.sh
    - serverless.yml
    - test/**
    - tests/**
    - sql_script/**
    - service_status/**
    - dapp-user/**
    - repository/**
    - Readme.md
    - parse_events.sh
    - package.json
    - Dockerfile
    - License
    - log_setup.py
    - heath_check.sh
    - node_modules/**
    - wallets/**
    - payments/**
    - orchestrator/**
    - notification/**
    - dapp_user/**
  include:
    - node_modules/singularitynet-platform-contracts/**
    - resources/**


functions:

  get_all_org:
    warmup: true
    handler: contract_api/application/handlers.organization_handlers.get_all_org
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /org
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get all organizations"
            description: "Get all organizations high level data"
            tags:
              - "organization"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Organization Data"
                responseModels:
                  "application/json": "GetAllOrgOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  get_org_for_org_id:
    warmup: true
    handler: contract_api/application/handlers.organization_handlers.get_org_for_org_id
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /org/{orgId}
          request:
            parameters:
              paths:
                orgId: true
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get all organizations by orgId"
            description: "Get all organization data by orgId"
            tags:
              - "organization"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Organization Data"
                responseModels:
                  "application/json": "GetOrgForOrgIdOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  get_all_group_for_org:
    warmup: true
    handler: contract_api/application/handlers.organization_handlers.get_all_group_for_org
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /org/{orgId}/group
          request:
            parameters:
              paths:
                orgId: true
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get all group for organization by orgId"
            description: "Get all group data for given orgId"
            tags:
              - "group"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Group Data"
                responseModels:
                  "application/json": "GetAllGroupForOrgOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  get_group_for_org_id:
    warmup: true
    handler:  contract_api/application/handlers.organization_handlers.get_group_for_org_id
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /org/{orgId}/group/{group_id}
          request:
            parameters:
              paths:
                orgId: true
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get group for organization by orgId and groupId"
            description: "Get group data for given orgId and groupId"
            tags:
              - "group"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Group Data"
                responseModels:
                  "application/json": "GetGroupForOrgIdOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  get_service_get:
    warmup: true
    handler: contract_api/application/handlers.service_handlers.get_service_get
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /service
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get service"
            description: "Get service"
            tags:
              - "service"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            queryParams:
              - name: "attribute"
                description: "get key value pairs based on attribute"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Service Data"
                responseModels:
                  "application/json": "GetServiceGetOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  get_service_post:
    warmup: true
    handler: contract_api/application/handlers.service_handlers.get_service_post
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /service
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get service"
            description: "Get service"
            tags:
              - "service"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "GetServicePostInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Service Data"
                responseModels:
                  "application/json": "GetServicePostOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  get_group_for_service:
    warmup: true
    handler:  contract_api/application/handlers.service_handlers.get_group_for_service
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /org/{orgId}/service/{serviceId}/group
          request:
            parameters:
              paths:
                orgId: true
                serviceId: true
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get group by orgId and serviceId"
            description: "Get group for given orgId and serviceId"
            tags:
              - "group"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Group Data"
                responseModels:
                  "application/json": "GetGroupForServiceOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  get_service_for_given_org:
    warmup: true
    handler: contract_api/application/handlers.service_handlers.get_service_for_given_org
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /org/{orgId}/service/{serviceId}
          request:
            parameters:
              paths:
                orgId: true
                serviceId: true
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get service by orgId and serviceId"
            description: "Get service for given orgId and serviceId"
            tags:
              - "service"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Service Data"
                responseModels:
                  "application/json": "GetServiceForGivenOrgOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  post_rating_for_given_service:
    warmup: true
    handler: contract_api/application/handlers.service_handlers.post_rating_for_given_service
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /org/{orgId}/service/{serviceId}/rating
          request:
            parameters:
              paths:
                orgId: true
                serviceId: true
          documentation:
            summary: "update rating for service by serviceId and orgId"
            description: "update rating for service by given serviceId and orgId "
            tags:
              - "service"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "GetServiceForGivenOrgInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "response"
                responseModels:
                  "application/json": "GetServiceForGivenOrgOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  get_channels_for_group:
    warmup: true
    handler: contract_api/application/handlers.channel_handlers.get_channels_for_group
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /group/{groupId}/channel/{channelId}
          request:
            parameters:
              paths:
                orgId: true
                serviceId: true
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get channels for groupId and channelId"
            description: "Get channels for given group by groupId and channelId"
            tags:
              - "channel"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "groupId"
                description: "Enter groupId"
              - name: "channelId"
                description: "Enter channelId"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "response"
                responseModels:
                  "application/json": "GetChannelsForGroupOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  get_channels_old_api:
    warmup: true
    handler: contract_api/application/handlers.channel_handlers.get_channels_old_api
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /channel
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get channel"
            description: "Get channel"
            tags:
              - "channel"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Channel Data"
                responseModels:
                  "application/json": "GetChannelsOldApiOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  get_channel:
    warmup: true
    handler: contract_api/application/handlers.channel_handlers.get_channels
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /v2/channel
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get channel"
            description: "Get channel"
            tags:
              - "channel"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Channel Data"
                responseModels:
                  "application/json": "GetChannelOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  update-consumed-balance:
    handler: contract_api/applciation/handlers.channel_handlers.update_consumed_balance
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
#          authorizer:
#            type: request
#            arn: ${file(./config.${self:provider.stage}.json):SIGN_AUTHORIZER}
#            identitySource: ${file(./config.${self:provider.stage}.json):SIGN_HEADERS}
#            name: update_consume_balance_authorizer
          path: /channel/{channel_id}/balance
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get balance by channel_id"
            description: "Get balance for given channel_id"
            tags:
              - "channel"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "channel_id"
                description: "Enter channel_id"
            requestModels:
              "application/json": "UpdateConsumedBalanceInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Channel Data"
                responseModels:
                  "application/json": "UpdateConsumedBalanceOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  get_marketplace_carousel:
    handler: contract_api/application/handlers.ui_content_handlers.get_marketplace_carousel
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /uicontent/marketplacecarousel
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get Marketplace carousel content"
            description: "Get the list of banners and their respects CTAs to display in the marketplace dapp carousel"
            tags:
              - "ui"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Carousel Data"
                responseModels:
                  "application/json": "MarketplaceCarousel"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  service-curation:
    handler: contract_api/application/handlers.service_handlers.service_curation
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  organization_event_consumer:
    warmup: true
    handler: contract_api/application/handlers.consumer_handlers.organization_event_consumer_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  service_event_consumer:
    warmup: true
    handler: contract_api/application/handlers.consumer_handlers.service_event_consumer_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    timeout: 60
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  mpe_event_consumer:
    warmup: true
    handler: contract_api/application/handlers.consumer_handlers.mpe_event_consumer_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  service_create_deployment_handler:
    warmup: true
    handler: contract_api/application/handlers.consumer_handlers.service_create_deployment_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE1}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  service_deploy_status_notify:
    handler: contract_api/application/handlers.service_handlers.service_deployment_status_notification_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  save-offchain-attribute:
    handler: contract_api/application/handler/service_handlers.save_offchain_attribute
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /org/{orgId}/service/{serviceId}/offchain-attributes/save
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with

  trigger-demo-component-build:
    handler: contract_api/application/handler.service_handlers.trigger_demo_component_build
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - s3:
          bucket: ${file(./config.${self:provider.stage}.json):COMPONENT_BUCKET}
          event: s3:ObjectCreated:*
          rules:
            - suffix: component.tar.gz
          existing: true
