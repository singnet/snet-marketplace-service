plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-graph
  - serverless-prune-plugin
  - serverless-aws-documentation

service: service-status
custom:
  pythonRequirements:
    fileName: service_status/requirements.txt
    dockerizePip: true
    useDownloadCache: true
    useStaticCache: true
    cacheLocation: '/var/cache/serverless'
  prune:
    automatic: true
    includeLayers: true
    number: 2
  documentation:
    models:
      - name: "ErrorMessage"
        contentType: "application/json"
        schema: ${file(service_status/documentation/models/error.json)}
      - name: "ResetServiceHealthNextCheckTimeOutput"
        contentType: "application/json"
        schema: ${file(service_status/documentation/models/reset_service_health_next_check_time.json):ResetServiceHealthNextCheckTimeOutput}


provider:
  name: aws
  runtime: python3.7
  description: Service status service # optional, Description to publish to AWS
  memorySize: 128
  timeout: 60
  region: ${file(./config.${self:provider.stage}.json):REGION}
  stage: ${opt:stage,'dev'}
  deploymentBucket:
    name: snet-serverless-artifacts # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption
    tags: # Tags that will be added to each of the deployment resources
      key1: service-status
  deploymentPrefix: serverless

package:
  exclude:
    - .circleci/**
    - .gitignore/**
    - .serverless/**
    - requirements.txt
    - venv/**
    - config.ropsten.json
    - serverless.yml
    - test/**
    - tests/**
    - sql_script/**
    - signer/**
    - contract_api/**
    - repository/**
    - Readme.md
    - parse_events.sh
    - package.json
    - Dockerfile
    - License
    - log_setup.py
    - heath_check.sh
    - node_modules/**

functions:
  service-status:
    warmup: true
    handler: service_status/handlers/monitor_service_handlers.request_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - schedule:
          rate: rate(5 minutes)
          enabled: ${file(./config.${self:provider.stage}.json):service_status_cron_status}

  monitor-service-cert-expiry:
    warmup: true
    handler: service_status/handlers/monitor_service_handlers.monitor_service_certificates_expiry_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - schedule:
          rate: rate(3 days)
          enabled: ${file(./config.${self:provider.stage}.json):monitor_service_cert_expiry_cron_status}

  reset-service-health-next-check-time:
    warmup: true
    handler: service_status/handlers/monitor_service_handlers.reset_service_health_next_check_time
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /org/{org_id}/service/{service_id}/health/reset
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Reset service health "
            description: "Reset service health next check time by given org_id and service_id"
            tags:
              - "service health"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "org_id"
                description: "Enter org_id"
              - name: "service_id"
                description: "Enter service_id"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "response"
                responseModels:
                  "application/json": "ResetServiceHealthNextCheckTimeOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"