plugins:
  - serverless-offline
  - serverless-prune-plugin
  - serverless-latest-layer-version

service: deployer
provider:
  name: aws
  runtime: python3.12
  memorySize: 512
  timeout: 30
  region: ${file(./config.${self:provider.stage}.json):REGION}
  stage: ${opt:stage,'dev'}
  layers:
    - ${file(./config.${self:provider.stage}.json):GeneralPythonLibsMP}
    - ${file(./config.${self:provider.stage}.json):OptionalPythonLibsMP}
    - ${file(./config.${self:provider.stage}.json):SnetContract}
  deploymentBucket:
    name: snet-serverless-artifacts # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption
    tags: # Tags that will be added to each of the deployment resources
      key1: deployer
  deploymentPrefix: serverless

custom:
  prune:
    automatic: true
    includeLayers: true
    number: 1
  queue:
    queueMessageRetention: ${file(./config.${self:provider.stage}.json):QUEUE_MESSAGE_RETENTION, 14400}
    dlqMessageRetention: ${file(./config.${self:provider.stage}.json):DLQ_MESSAGE_RETENTION, 1209600}
    queueMaxReceiveCount: ${file(./config.${self:provider.stage}.json):QUEUE_MAX_RECEIVE_COUNT, 2}
    receiveMessageWaitTimeSeconds: ${file(./config.${self:provider.stage}.json):RECEIVE_MESSAGE_WAIT_TIME_SECONDS, 20}
    messageVisibilityTimeout: ${file(./config.${self:provider.stage}.json):MESSAGE_VISIBILITY_TIMEOUT, 60}


package:
  exclude:
    - .circleci/**
    - .gitignore/**
    - .serverless/**
    - requirements.txt
    - venv/**
    - config.ropsten.json
    - sls_deploy.sh
    - serverless.yml
    - test/**
    - tests/**
    - sql_script/**
    - service_status/**
    - dapp-user/**
    - repository/**
    - Readme.md
    - parse_events.sh
    - package.json
    - Dockerfile
    - License
    - log_setup.py
    - heath_check.sh
    - node_modules/**
    - wallets/**
    - payments/**
    - orchestrator/**
    - notification/**
    - dapp_user/**
  include:
    - resources/**


resources:
  Resources:

    # =============================================================
    # ===================    EVENT SOURCES    =====================
    # =============================================================

    # ==================== SERVICE CALL EVENTS ====================

    serviceCallEventConsumerQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${file(./config.${self:provider.stage}.json):SERVICE_CALL_QUEUE}
        VisibilityTimeout: ${self:custom.queue.messageVisibilityTimeout}
        ReceiveMessageWaitTimeSeconds: ${self:custom.queue.receiveMessageWaitTimeSeconds}
        MessageRetentionPeriod: ${self:custom.queue.queueMessageRetention}
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt serviceCallEventConsumerDLQ.Arn
          maxReceiveCount: ${self:custom.queue.queueMaxReceiveCount}

    serviceCallEventConsumerQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Id: serviceCallEventConsumerQueue
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - sqs:SendMessage
              Resource: !GetAtt serviceCallEventConsumerQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: ${file(./config.${self:provider.stage}.json):SERVICE_CALL_TOPIC_ARN}
        Queues:
          - !Ref serviceCallEventConsumerQueue

    serviceCallEventConsumerTopicSubscriptionForSQS:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt serviceCallEventConsumerQueue.Arn
        TopicArn: ${file(./config.${self:provider.stage}.json):SERVICE_CALL_TOPIC_ARN}

    serviceCallEventConsumerDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${file(./config.${self:provider.stage}.json):SERVICE_CALL_QUEUE}-dlq
        VisibilityTimeout: ${self:custom.queue.messageVisibilityTimeout}
        ReceiveMessageWaitTimeSeconds: ${self:custom.queue.receiveMessageWaitTimeSeconds}
        MessageRetentionPeriod: ${self:custom.queue.dlqMessageRetention}

    serviceCallEventConsumerDLQPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Id: serviceCallEventConsumerDLQ
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - sqs:SendMessage
              Resource: !GetAtt serviceCallEventConsumerDLQ.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt serviceCallEventConsumerQueue.Arn
        Queues:
          - !Ref serviceCallEventConsumerDLQ

    # ==================== REGISTRY EVENTS ====================

    registryEventConsumerQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${file(./config.${self:provider.stage}.json):REGISTRY_QUEUE}
        VisibilityTimeout: ${self:custom.queue.messageVisibilityTimeout}
        ReceiveMessageWaitTimeSeconds: ${self:custom.queue.receiveMessageWaitTimeSeconds}
        MessageRetentionPeriod: ${self:custom.queue.queueMessageRetention}
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt registryEventConsumerDLQ.Arn
          maxReceiveCount: ${self:custom.queue.queueMaxReceiveCount}

    registryEventConsumerQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Id: registryEventConsumerQueue
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - sqs:SendMessage
              Resource: !GetAtt registryEventConsumerQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: ${file(./config.${self:provider.stage}.json):REGISTRY_TOPIC_ARN}
        Queues:
          - !Ref registryEventConsumerQueue

    registryEventConsumerTopicSubscriptionForSQS:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt registryEventConsumerQueue.Arn
        TopicArn: ${file(./config.${self:provider.stage}.json):REGISTRY_TOPIC_ARN}

    registryEventConsumerDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${file(./config.${self:provider.stage}.json):REGISTRY_QUEUE}-dlq
        VisibilityTimeout: ${self:custom.queue.messageVisibilityTimeout}
        ReceiveMessageWaitTimeSeconds: ${self:custom.queue.receiveMessageWaitTimeSeconds}
        MessageRetentionPeriod: ${self:custom.queue.dlqMessageRetention}

    registryEventConsumerDLQPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Id: registryEventConsumerDLQ
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - sqs:SendMessage
              Resource: !GetAtt registryEventConsumerDLQ.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt registryEventConsumerQueue.Arn
        Queues:
          - !Ref registryEventConsumerDLQ

    # ==================== CHECK DAEMON STATUS EVENTS ====================

    checkDaemonStatusEventConsumerQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${file(./config.${self:provider.stage}.json):CHECK_DAEMON_STATUS_QUEUE}
        VisibilityTimeout: ${self:custom.queue.messageVisibilityTimeout}
        ReceiveMessageWaitTimeSeconds: ${self:custom.queue.receiveMessageWaitTimeSeconds}
        MessageRetentionPeriod: ${self:custom.queue.queueMessageRetention}
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt checkDaemonStatusEventConsumerDLQ.Arn
          maxReceiveCount: ${self:custom.queue.queueMaxReceiveCount}

    checkDaemonStatusEventConsumerQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Id: checkDaemonStatusEventConsumerQueue
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - sqs:SendMessage
              Resource: !GetAtt checkDaemonStatusEventConsumerQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: ${file(./config.${self:provider.stage}.json):CHECK_DAEMON_STATUS_TOPIC_ARN}
        Queues:
          - !Ref checkDaemonStatusEventConsumerQueue

    checkDaemonStatusEventConsumerTopicSubscriptionForSQS:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt checkDaemonStatusEventConsumerQueue.Arn
        TopicArn: ${file(./config.${self:provider.stage}.json):CHECK_DAEMON_STATUS_TOPIC_ARN}

    checkDaemonStatusEventConsumerDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${file(./config.${self:provider.stage}.json):CHECK_DAEMON_STATUS_QUEUE}-dlq
        VisibilityTimeout: ${self:custom.queue.messageVisibilityTimeout}
        ReceiveMessageWaitTimeSeconds: ${self:custom.queue.receiveMessageWaitTimeSeconds}
        MessageRetentionPeriod: ${self:custom.queue.dlqMessageRetention}

    checkDaemonStatusEventConsumerDLQPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Id: checkDaemonStatusEventConsumerDLQ
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - sqs:SendMessage
              Resource: !GetAtt checkDaemonStatusEventConsumerDLQ.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt checkDaemonStatusEventConsumerQueue.Arn
        Queues:
          - !Ref checkDaemonStatusEventConsumerDLQ

    # ==================== UPDATE HOSTED SERVICE STATUS EVENTS ====================

    updateHostedServiceStatusEventConsumerQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${file(./config.${self:provider.stage}.json):UPDATE_HOSTED_SERVICE_STATUS_QUEUE}
        VisibilityTimeout: ${self:custom.queue.messageVisibilityTimeout}
        ReceiveMessageWaitTimeSeconds: ${self:custom.queue.receiveMessageWaitTimeSeconds}
        MessageRetentionPeriod: ${self:custom.queue.queueMessageRetention}
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt updateHostedServiceStatusEventConsumerDLQ.Arn
          maxReceiveCount: ${self:custom.queue.queueMaxReceiveCount}

    updateHostedServiceStatusEventConsumerQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Id: updateHostedServiceStatusEventConsumerQueue
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - sqs:SendMessage
              Resource: !GetAtt updateHostedServiceStatusEventConsumerQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: ${file(./config.${self:provider.stage}.json):UPDATE_HOSTED_SERVICE_STATUS_TOPIC_ARN}
        Queues:
          - !Ref updateHostedServiceStatusEventConsumerQueue

    updateHostedServiceStatusEventConsumerTopicSubscriptionForSQS:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt updateHostedServiceStatusEventConsumerQueue.Arn
        TopicArn: ${file(./config.${self:provider.stage}.json):UPDATE_HOSTED_SERVICE_STATUS_TOPIC_ARN}

    updateHostedServiceStatusEventConsumerDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${file(./config.${self:provider.stage}.json):UPDATE_HOSTED_SERVICE_STATUS_QUEUE}-dlq
        VisibilityTimeout: ${self:custom.queue.messageVisibilityTimeout}
        ReceiveMessageWaitTimeSeconds: ${self:custom.queue.receiveMessageWaitTimeSeconds}
        MessageRetentionPeriod: ${self:custom.queue.dlqMessageRetention}

    updateHostedServiceStatusEventConsumerDLQPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Id: updateHostedServiceStatusEventConsumerDLQ
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - sqs:SendMessage
              Resource: !GetAtt updateHostedServiceStatusEventConsumerDLQ.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt updateHostedServiceStatusEventConsumerQueue.Arn
        Queues:
          - !Ref updateHostedServiceStatusEventConsumerDLQ

    # =============================================================
    # ===============    ADDITIONAL RESOURCES    ==================
    # =============================================================

    # =============== SERVICE CALL EVENTS (METRICS) ===============

    serviceCallForMetricsEventConsumerQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${file(./config.${self:provider.stage}.json):SERVICE_CALL_FOR_METRICS_QUEUE}
        VisibilityTimeout: ${self:custom.queue.messageVisibilityTimeout}
        ReceiveMessageWaitTimeSeconds: ${self:custom.queue.receiveMessageWaitTimeSeconds}
        MessageRetentionPeriod: ${self:custom.queue.queueMessageRetention}
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt serviceCallForMetricsEventConsumerDLQ.Arn
          maxReceiveCount: ${self:custom.queue.queueMaxReceiveCount}

    serviceCallForMetricsEventConsumerQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Id: serviceCallForMetricsEventConsumerQueue
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - sqs:SendMessage
              Resource: !GetAtt serviceCallForMetricsEventConsumerQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: ${file(./config.${self:provider.stage}.json):SERVICE_CALL_TOPIC_ARN}
        Queues:
          - !Ref serviceCallForMetricsEventConsumerQueue

    serviceCallForMetricsEventConsumerTopicSubscriptionForSQS:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt serviceCallForMetricsEventConsumerQueue.Arn
        TopicArn: ${file(./config.${self:provider.stage}.json):SERVICE_CALL_TOPIC_ARN}

    serviceCallForMetricsEventConsumerDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${file(./config.${self:provider.stage}.json):SERVICE_CALL_FOR_METRICS_QUEUE}-dlq
        VisibilityTimeout: ${self:custom.queue.messageVisibilityTimeout}
        ReceiveMessageWaitTimeSeconds: ${self:custom.queue.receiveMessageWaitTimeSeconds}
        MessageRetentionPeriod: ${self:custom.queue.dlqMessageRetention}

    serviceCallForMetricsEventConsumerDLQPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Id: serviceCallForMetricsEventConsumerDLQ
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - sqs:SendMessage
              Resource: !GetAtt serviceCallForMetricsEventConsumerDLQ.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt serviceCallForMetricsEventConsumerQueue.Arn
        Queues:
          - !Ref serviceCallForMetricsEventConsumerDLQ

    # ==================== DEPLOY SERVICE EVENTS ====================

    deployServiceEventConsumerQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${file(./config.${self:provider.stage}.json):DEPLOY_SERVICE_QUEUE}
        VisibilityTimeout: ${self:custom.queue.messageVisibilityTimeout}
        ReceiveMessageWaitTimeSeconds: ${self:custom.queue.receiveMessageWaitTimeSeconds}
        MessageRetentionPeriod: ${self:custom.queue.queueMessageRetention}
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt deployServiceEventConsumerDLQ.Arn
          maxReceiveCount: ${self:custom.queue.queueMaxReceiveCount}

    deployServiceEventConsumerQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Id: deployServiceEventConsumerQueue
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - sqs:SendMessage
              Resource: !GetAtt deployServiceEventConsumerQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: ${file(./config.${self:provider.stage}.json):DEPLOY_SERVICE_TOPIC_ARN}
        Queues:
          - !Ref deployServiceEventConsumerQueue

    deployServiceEventConsumerTopicSubscriptionForSQS:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt deployServiceEventConsumerQueue.Arn
        TopicArn: ${file(./config.${self:provider.stage}.json):DEPLOY_SERVICE_TOPIC_ARN}

    deployServiceEventConsumerDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${file(./config.${self:provider.stage}.json):DEPLOY_SERVICE_QUEUE}-dlq
        VisibilityTimeout: ${self:custom.queue.messageVisibilityTimeout}
        ReceiveMessageWaitTimeSeconds: ${self:custom.queue.receiveMessageWaitTimeSeconds}
        MessageRetentionPeriod: ${self:custom.queue.dlqMessageRetention}

    deployServiceEventConsumerDLQPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Id: deployServiceEventConsumerDLQ
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - sqs:SendMessage
              Resource: !GetAtt deployServiceEventConsumerDLQ.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt deployServiceEventConsumerQueue.Arn
        Queues:
          - !Ref deployServiceEventConsumerDLQ

functions:

  # ============= BILLING HANDLERS ============

  create-order:
    handler: deployer.application.handlers.billing_handlers.create_order
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /order
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-wit

  save-evm-transaction:
    handler: deployer.application.handlers.billing_handlers.save_evm_transaction
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /transaction
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-wit

  get-balance:
    handler: deployer.application.handlers.billing_handlers.get_balance
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /balance
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-wit

  get-balance-history:
    handler: deployer.application.handlers.billing_handlers.get_balance_history
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /balance/history
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-wit

  get-metrics:
    handler: deployer.application.handlers.billing_handlers.get_metrics
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /hosted-service/{hostedServiceId}/metrics
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-wit

  update-transaction-status:
    handler: deployer.application.handlers.billing_handlers.update_transaction_status
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - schedule:
          rate: rate(1 minute)

  call-event-consumer:
    handler: deployer.application.handlers.billing_handlers.call_event_consumer
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - serviceCallEventConsumerQueue
              - Arn
          batchSize: 1

  # ============= DEPLOYMENTS HANDLERS ============

  initiate-deployment:
    handler: deployer.application.handlers.deployments_handlers.initiate_deployment
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /deployment
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-wit

  get-user-deployments:
    handler: deployer.application.handlers.deployments_handlers.get_user_deployments
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /deployments
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-wit

  search-deployments:
    handler: deployer.application.handlers.deployments_handlers.search_deployments
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /deployment/search
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-wit

  get-public-key:
    handler: deployer.application.handlers.daemon_handlers.get_public_key
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /auth/public-key
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-wit

  registry-event-consumer:
    handler: deployer.application.handlers.job_handlers.registry_event_consumer
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - registryEventConsumerQueue
              - Arn
          batchSize: 1

  # ============= DAEMON HANDLERS ============

  get-daemon:
    handler: deployer.application.handlers.daemon_handlers.get_daemon
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /daemon/{daemonId}
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-wit

  get-daemon-logs:
    handler: deployer.application.handlers.daemon_handlers.get_daemon_logs
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /daemon/{daemonId}/logs
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-wit

  update-config:
    handler: deployer.application.handlers.daemon_handlers.update_config
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /daemon/{daemonId}/config
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-wit

  redeploy-daemon:
    handler: deployer.application.handlers.daemon_handlers.redeploy_daemon
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  check-daemon-status:
    handler: deployer.application.handlers.daemon_handlers.check_daemon_status
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - checkDaemonStatusEventConsumerQueue
              - Arn
          batchSize: 1

  redeploy-all-daemons:
    handler: deployer.application.handlers.daemon_handlers.redeploy_all_daemons
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  deploy-daemon:
    handler: deployer.application.handlers.daemon_handlers.deploy_daemon
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

#  delete-daemon:
#    handler: deployer.application.handlers.daemon_handlers.delete_daemon
#    role: ${file(./config.${self:provider.stage}.json):ROLE}
#    vpc:
#      securityGroupIds:
#        - ${file(./config.${self:provider.stage}.json):SG1}
#        - ${file(./config.${self:provider.stage}.json):SG2}
#      subnetIds:
#        - ${file(./config.${self:provider.stage}.json):VPC1}
#        - ${file(./config.${self:provider.stage}.json):VPC2}

#  check-daemons:
#    handler: deployer.application.handlers.daemon_handlers.check_daemons
#    role: ${file(./config.${self:provider.stage}.json):ROLE}
#    vpc:
#      securityGroupIds:
#        - ${file(./config.${self:provider.stage}.json):SG1}
#        - ${file(./config.${self:provider.stage}.json):SG2}
#      subnetIds:
#        - ${file(./config.${self:provider.stage}.json):VPC1}
#        - ${file(./config.${self:provider.stage}.json):VPC2}
#    events:
#      - schedule:
#          rate: rate(5 minutes)

  # ============= HOSTED SERVICE HANDLERS ============

  get-hosted-service:
    handler: deployer.application.handlers.hosted_services_handlers.get_hosted_service
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /hosted-service/{hostedServiceId}
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-wit

  get-hosted-service-logs:
    handler: deployer.application.handlers.hosted_services_handlers.get_hosted_service_logs
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /hosted-service/{hostedServiceId}/logs
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-wit

  update-hosted-service-status:
    handler: deployer.application.handlers.hosted_services_handlers.update_hosted_service_status
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - updateHostedServiceStatusEventConsumerQueue
              - Arn
          batchSize: 1

#  deploy-service:
#    handler: deployer.application.handlers.hosted_services_handlers.deploy_service
#    role: ${file(./config.${self:provider.stage}.json):ROLE}
#    vpc:
#      securityGroupIds:
#        - ${file(./config.${self:provider.stage}.json):SG1}
#        - ${file(./config.${self:provider.stage}.json):SG2}
#      subnetIds:
#        - ${file(./config.${self:provider.stage}.json):VPC1}
#        - ${file(./config.${self:provider.stage}.json):VPC2}

#  delete-service:
#    handler: deployer.application.handlers.hosted_services_handlers.delete_service
#    role: ${file(./config.${self:provider.stage}.json):ROLE}
#    vpc:
#      securityGroupIds:
#        - ${file(./config.${self:provider.stage}.json):SG1}
#        - ${file(./config.${self:provider.stage}.json):SG2}
#      subnetIds:
#        - ${file(./config.${self:provider.stage}.json):VPC1}
#        - ${file(./config.${self:provider.stage}.json):VPC2}


