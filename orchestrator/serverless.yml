plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-plugin-tracing
  - serverless-prune-plugin
  - serverless-aws-documentation

service: orchestrator
custom:
  pythonRequirements:
    fileName: orchestrator/requirements.txt
    dockerizePip: true
    useDownloadCache: true
    useStaticCache: true
    cacheLocation: "/var/cache/serverless"
  prune:
    automatic: true
    includeLayers: true
    number: 2
  documentation:
    models:
      - name: "ErrorMessage"
        contentType: "application/json"
        schema: ${file(orchestrator/documentation/models/error.json)}
      - name: "WalletRegisterOutput"
        contentType: "application/json"
        schema: ${file(orchestrator/documentation/models/waller_register.json):WalletRegisterOutput}
      - name: "WalletRegisterInput"
        contentType: "application/json"
        schema: ${file(orchestrator/documentation/models/waller_register.json):WalletRegisterInput}
      - name: "WalletStatusOutput"
        contentType: "application/json"
        schema: ${file(orchestrator/documentation/models/wallet_status.json):WalletStatusOutput}
      - name: "WalletStatusInput"
        contentType: "application/json"
        schema: ${file(orchestrator/documentation/models/wallet_status.json):WalletStatusInput}
      - name: "WalletChannelOutput"
        contentType: "application/json"
        schema: ${file(orchestrator/documentation/models/wallet_channel.json):WalletChannelOutput}
      - name: "GetWalletOutput"
        contentType: "application/json"
        schema: ${file(orchestrator/documentation/models/get_wallet.json):GetWalletOutput}
      - name: "GetOrderOutput"
        contentType: "application/json"
        schema: ${file(orchestrator/documentation/models/get_order.json):GetOrderOutput}
      - name: "GetOrderByOrderIdOutput"
        contentType: "application/json"
        schema: ${file(orchestrator/documentation/models/get_order_by_order_id.json):GetOrderByOrderIdOutput}
      - name: "InitiateOrderOutput"
        contentType: "application/json"
        schema: ${file(orchestrator/documentation/models/initate_order.json):InitiateOrderOutput}
      - name: "InitiateOrderInput"
        contentType: "application/json"
        schema: ${file(orchestrator/documentation/models/initate_order.json):InitiateOrderInput}
      - name: "ExecuteOrderOutput"
        contentType: "application/json"
        schema: ${file(orchestrator/documentation/models/execute_order.json):ExecuteOrderOutput}
      - name: "ExecuteOrderInput"
        contentType: "application/json"
        schema: ${file(orchestrator/documentation/models/execute_order.json):ExecuteOrderInput}
      - name: "CancelOrderOutput"
        contentType: "application/json"
        schema: ${file(orchestrator/documentation/models/cancel_order.json):CancelOrderOutput}
      - name: "GetTokenOutput"
        contentType: "application/json"
        schema: ${file(orchestrator/documentation/models/currency_to_token_conversion.json):GetTokenOutput}
      - name: "CreateOrganizationOutput"
        contentType: "application/json"
        schema: ${file(orchestrator/documentation/models/create_org.json):CreateOrganizationOutput}
      - name: "CreateOrganizationInput"
        contentType: "application/json"
        schema: ${file(orchestrator/documentation/models/create_org.json):CreateOrganizationInput}
      - name: "RegisterOrgMemberOutput"
        contentType: "application/json"
        schema: ${file(orchestrator/documentation/models/register_org_member.json):RegisterOrgMemberOutput}
      - name: "RegisterOrgMemberInput"
        contentType: "application/json"
        schema: ${file(orchestrator/documentation/models/register_org_member.json):RegisterOrgMemberInput}

provider:
  name: aws
  runtime: python3.7
  description: Orchestrator # optional, Description to publish to AWS
  memorySize: 512
  timeout: 60
  region: ${file(./config.${self:provider.stage}.json):REGION}
  stage: ${opt:stage,'dev'}
  deploymentBucket:
    name: snet-serverless-artifacts # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption
    tags: # Tags that will be added to each of the deployment resources
      key1: orchestrator
  deploymentPrefix: serverless
  versionFunctions: false
  tracing: true

package:
  exclude:
    - .circleci/**
    - .gitignore/**
    - .serverless/**
    - requirements.txt
    - venv/**
    - config.ropsten.json
    - test/**
    - tests/**
    - sql_script/**
    - service_status/**
    - contract_api/**
    - dapp-user/**
    - repository/**
    - Readme.md
    - parse_events.sh
    - package.json
    - Dockerfile
    - License
    - log_setup.py
    - heath_check.sh
    - node_modules/**

functions:
  orchestrator:
    warmup: true
    handler: orchestrator/lambda_handler.request_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /wallet/register
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Register wallet"
            description: "Register wallet"
            tags:
              - "wallet"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "WalletRegisterInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Wallet Data"
                responseModels:
                  "application/json": "WalletRegisterOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

      - http:
          method: POST
          path: /wallet/status
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Wallet status"
            description: "Wallet status"
            tags:
              - "wallet"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "WalletStatusInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Wallet Data"
                responseModels:
                  "application/json": "WalletStatusOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"


      - http:
          method: GET
          path: /wallet/channel
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Wallet channel"
            description: "Wallet channel"
            tags:
              - "wallet"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Wallet Data"
                responseModels:
                  "application/json": "WalletChannelOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

      - http:
          method: GET
          path: /wallet
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get wallet"
            description: "Get wallet"
            tags:
              - "wallet"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Wallet Data"
                responseModels:
                  "application/json": "GetWalletOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"


  get-order:
    warmup: true
    handler: orchestrator/handlers.order_handler.get
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /order
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get order"
            description: "Get order "
            tags:
              - "wallet"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Order Data"
                responseModels:
                  "application/json": "GetOrderOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

      - http:
          method: GET
          path: /order/{order_id}
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get order by order_id"
            description: "Get order for given order_id"
            tags:
              - "order"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "order_id"
                description: "Enter order_id"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Order Data"
                responseModels:
                  "application/json": "GetOrderByOrderIdOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"


  initiate-order:
    warmup: true
    handler: orchestrator/handlers.order_handler.initiate
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /order/initiate
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Initiate order"
            description: "Initiate order"
            tags:
              - "order"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestBody:
                description: "request body"
            requestModels:
              "application/json": "InitiateOrderInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Order Data"
                responseModels:
                  "application/json": "InitiateOrderOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  execute-order:
    warmup: true
    handler: orchestrator/handlers.order_handler.execute
    timeout: 60
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /order/execute
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Execute order"
            description: "Initiate order"
            tags:
              - "order"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "ExecuteOrderInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Order Data"
                responseModels:
                  "application/json": "ExecuteOrderOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  cancel-order:
    warmup: true
    handler: orchestrator/handlers.order_handler.cancel
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /order/{order_id}/cancel
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          requestHeaders:
            - name: "Content-Type"
              description: "application/json"
          pathParams:
              - name: "order_id"
                description: "Enter order_id"
          methodResponses:
            - statusCode: "200"
              responseBody:
                description: "Order Data"
              responseModels:
                "application/json": "CancelOrderOutput"
            - statusCode: "500"
              responseModels:
                 "application/json": "ErrorMessage"
  currency-to-token-conversion:
    warmup: true
    handler: orchestrator/handlers.order_handler.currency_to_token_conversion
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /currency/{currency}/token
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get token by currency"
            description: "Get token by given currency"
            tags:
              - "order"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "currency"
                description: "Enter currency"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Token Data"
                responseModels:
                  "application/json": "GetTokenOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  register-org-member:
    warmup: true
    handler: orchestrator.publisher.application.handlers.organization_handlers.register_org_member
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /org/member/register
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Register member"
            description: "Register member"
            tags:
              - "member"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
                "application/json": "RegisterOrgMemberInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Member Data"
                responseModels:
                  "application/json": "RegisterOrgMemberOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  create-org:
    handler: orchestrator.publisher.application.handlers.organization_handlers.create_org
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /org
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Create organization"
            description: "Create organization"
            tags:
              - "organization"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "CreateOrganizationInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "organization Data"
                responseModels:
                  "application/json": "CreateOrganizationOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  updateTxnStatus:
    warmup: true
    handler: orchestrator/handlers.update_transaction_status_handler.request_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - schedule: rate(2 minutes)
