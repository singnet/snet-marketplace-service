plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-plugin-tracing
  - serverless-prune-plugin
  - serverless-aws-documentation

service: verification
custom:
  pythonRequirements:
    fileName: verification/requirements.txt
    dockerizePip: true
    useDownloadCache: true
    useStaticCache: true
    cacheLocation: "/var/cache/serverless"
  prune:
    automatic: true
    includeLayers: true
    number: 2
  documentation:
    models:
      - name: "ErrorMessage"
        contentType: "application/json"
        schema: ${file(verification/documentation/models/error.json)}
      - name: "InitiateOutput"
        contentType: "application/json"
        schema: ${file(verification/documentation/models/initiate.json):InitiateOutput}
      - name: "InitiateInput"
        contentType: "application/json"
        schema: ${file(verification/documentation/models/initiate.json):InitiateInput}
      - name: "CallBackOutput"
        contentType: "application/json"
        schema: ${file(verification/documentation/models/callback.json):CallBackOutput}
      - name: "CallBackInput"
        contentType: "application/json"
        schema: ${file(verification/documentation/models/callback.json):CallBackInput}
      - name: "StatusOutput"
        contentType: "application/json"
        schema: ${file(verification/documentation/models/status.json):StatusOutput}
      - name: "PostCallBackOutput"
        contentType: "application/json"
        schema: ${file(verification/documentation/models/post_callback.json):PostCallBackOutput}
      - name: "PostCallBackInput"
        contentType: "application/json"
        schema: ${file(verification/documentation/models/post_callback.json):PostCallBackInput}

provider:
  name: aws
  runtime: python3.7
  description: verification # optional, Description to publish to AWS
  memorySize: 512
  timeout: 60
  region: ${file(./config.${self:provider.stage}.json):REGION}
  stage: ${opt:stage,'dev'}
  deploymentBucket:
    name: snet-serverless-artifacts # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption
    tags: # Tags that will be added to each of the deployment resources
      key1: verification
  deploymentPrefix: serverless
  versionFunctions: false
  tracing: true

package:
  exclude:
    - .circleci/**
    - .gitignore/**
    - .serverless/**
    - requirements.txt
    - venv/**
    - config.ropsten.json
    - test/**
    - tests/**
    - sql_script/**
    - service_status/**
    - contract_api/**
    - dapp-user/**
    - repository/**
    - Readme.md
    - parse_events.sh
    - package.json
    - Dockerfile
    - License
    - log_setup.py
    - heath_check.sh
    - node_modules/**
    - registry/**
  include:
    - node_modules/singularitynet-platform-contracts/**

functions:
  initiate:
    handler: verification/application/handlers/verification_handlers.initiate
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /initiate
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            header:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          documentation:
            summary: "Initiate"
            description: "Initiate"
            tags:
              - "verification"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
                "application/json": "InitiateInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "response data"
                responseModels:
                  "application/json": "InitiateOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  callback:
    warmup: true
    handler: verification/application/handlers/verification_handlers.callback
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
      tags:
        Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
    events:
      - http:
          method: POST
          path: /callback
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            header:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          documentation:
            summary: "callback"
            description: "callback"
            tags:
              - "verification"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "CallBackInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "response data"
                responseModels:
                  "application/json": "CallBackOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"


  status:
    warmup: true
    handler: verification/application/handlers/verification_handlers.get_status
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
      tags:
        Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
    events:
      - http:
          method: GET
          path: /status
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            header:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          documentation:
            summary: "status"
            description: "status"
            tags:
              - "verification"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "response data"
                responseModels:
                  "application/json": "StatusOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"
          events:
            - http:
                method: POST
                path: /callback
                cors:
                  origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
                  header:
                    - Content-Type
                    - X-Amz-Date
                    - Authorization
                    - X-Api-Key
                    - X-Amz-Security-Token
                    - X-Amz-User-Agent
                documentation:
                  summary: "Post callback"
                  description: "Post callback"
                  tags:
                    - "verification"
                  requestHeaders:
                    - name: "Content-Type"
                      description: "application/json"
                  requestModels:
                    "application/json": "PostCallBackInput"
                  methodResponses:
                    - statusCode: "200"
                      responseBody:
                        description: "response data"
                      responseModels:
                        "application/json": "PostCallBackOutput"
                    - statusCode: "500"
                      responseModels:
                        "application/json": "ErrorMessage"


