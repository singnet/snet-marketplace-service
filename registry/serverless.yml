plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-plugin-tracing
  - serverless-prune-plugin
  - serverless-plugin-split-stacks
  - serverless-aws-documentation

service: registry
provider:
  name: aws
  runtime: python3.7
  description: offchain information of organizations and services
  memorySize: 512
  timeout: 60
  region: ${file(./config.${self:provider.stage}.json):REGION}
  stage: ${opt:stage,'dev'}
  deploymentBucket:
    name: snet-serverless-artifacts
    serverSideEncryption: AES256
    tags:
      key1: registry
    deploymentPrefix: serverless
    tracing: true

custom:
  pythonRequirements:
    fileName: registry/requirements.txt
    dockerizePip: true
    useDownloadCache: true
    useStaticCache: true
    cacheLocation: "/var/cache/serverless"
  prune:
    automatic: true
    includeLayers: true
    number: 2
  splitStacks:
    perFunction: false
    perType: true
    perGroupFunction: false
  documentation:
    models:
      - name: "ErrorMessage"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/error.json)}
      - name: "GetAllOrgOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/get_all_org.json):GetAllOrgOutput}
      - name: "VerifyOrganizationIdOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/verify_org_id.json):VerifyOrganizationIdOutput}
      - name: "GetGroupsForOrgOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/get_groups_for_org.json):GetGroupsForOrgOutput}
      - name: "SaveOrgTransactionsOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/save_org_transactions.json):SaveOrgTransactionsOutput}
      - name: "SaveOrgTransactionsInput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/save_org_transactions.json):SaveOrgTransactionsInput}
      - name: "GetAllOrgPendingForApprovalOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/get_all_org_pending_for_approval.json):GetAllOrgPendingForApprovalOutput}
      - name: "GetAllOrgPendingForApprovalInput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/get_all_org_pending_for_approval.json):GetAllOrgPendingForApprovalInput}
      - name: "SlackInteractionForApprovalOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/slack_interaction_for_approval.json):SlackInteractionForApprovalOutput}
      - name: "SlackInteractionForApprovalInput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/slack_interaction_for_approval.json):SlackInteractionForApprovalInput}
      - name: "GetAllServicePendingForApprovalOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/get_all_service_pending_for_approval.json):GetAllServicePendingForApprovalOutput}
      - name: "GetAllServicePendingForApprovalInput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/get_all_service_pending_for_approval.json):GetAllServicePendingForApprovalInput}
      - name: "FileDeleteOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/file_delete.json):FileDeleteOutput}
      - name: "FileDeleteInput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/file_delete.json):FileDeleteInput}
      - name: "DemonConfigForGivenNetworkIdOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/demon_config_for_given_network_id.json):DemonConfigForGivenNetworkIdOutput}
      - name: "SaveServiceTransactionOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/save_service_transaction.json):SaveServiceTransactionOutput}
      - name: "SaveServiceTransactionInput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/save_service_transaction.json):SaveServiceTransactionInput}
      - name: "SubmitServiceOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/submit_service.json):SubmitServiceOutput}
      - name: "SubmitServiceInput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/submit_service.json):SubmitServiceInput}
      - name: "PublishServiceMetadataToIpfsHashOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/publish_service_metadata_to_ipfs_hash.json):PublishServiceMetadataToIpfsHashOutput}
      - name: "PublishServiceMetadataToIpfsHashInput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/publish_service_metadata_to_ipfs_hash.json):PublishServiceMetadataToIpfsHashInput}
      - name: "CreateOrgOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/create_org.json):CreateOrgOutput}
      - name: "CreateOrgInput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/create_org.json):CreateOrgInput}
      - name: "PublishOrgIpfsOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/publish_org_ipfs.json):PublishOrgIpfsOutput}
      - name: "PublishOrgIpfsInput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/publish_org_ipfs.json):PublishOrgIpfsInput}
      - name: "GetMemberOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/get_member.json):GetMemberOutput}
      - name: "GetAllMembersOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/get_all_members.json):GetAllMembersOutput}
      - name: "InviteMembersOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/invite_members.json):InviteMembersOutput}
      - name: "InviteMembersInput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/invite_members.json):InviteMembersInput}
      - name: "VerifyInviteOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/verify_invite.json):VerifyInviteOutput}
      - name: "RegisterMemberOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/register_member.json):RegisterMemberOutput}
      - name: "RegisterMemberInput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/register_member.json):RegisterMemberInput}
      - name: "PublishMembersOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/publish_members.json):PublishMembersOutput}
      - name: "PublishMembersInput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/publish_members.json):PublishMembersInput}
      - name: "DeleteMemberOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/delete_member.json):DeleteMemberOutput}
      - name: "DeleteMemberInput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/delete_member.json):DeleteMemberInput}
      - name: "VerifyServiceIdOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/verify_service_id.json):VerifyServiceIdOutput}
      - name: "CreateServiceOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/create_service.json):CreateServiceOutput}
      - name: "CreateServiceInput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/create_service.json):CreateServiceInput}
      - name: "SaveServiceOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/save_service.json):SaveServiceOutput}
      - name: "SaveServiceInput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/save_service.json):SaveServiceInput}
      - name: "SaveServiceAttributesOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/save_service_attributes.json):SaveServiceAttributesOutput}
      - name: "GetServicesForOrgOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/get_services_for_org.json):GetServicesForOrgOutput}
      - name: "GetServicesForOrgInput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/get_services_for_org.json):GetServicesForOrgInput}
      - name: "GetServiceForServiceUuidOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/get_service_for_service_uuid.json):GetServiceForServiceUuidOutput}
      - name: "UpdateOrgOutput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/update_org.json):UpdateOrgOutput}
      - name: "UpdateOrgInput"
        contentType: "application/json"
        schema: ${file(registry/documentation/models/update_org.json):UpdateOrgInput}

package:
  exclude:
    - .circleci/**
    - .gitignore/**
    - .serverless/**
    - requirements.txt
    - venv/**
    - config.ropsten.json
    - sls_deploy.sh
    - serverless.yml
    - test/**
    - tests/**
    - sql_script/**
    - service_status/**
    - dapp-user/**
    - repository/**
    - Readme.md
    - parse_events.sh
    - package.json
    - Dockerfile
    - License
    - log_setup.py
    - heath_check.sh
    - node_modules/**
    - wallets/**
    - payments/**
    - orchestrator/**
    - notification/**
    - dapp_user/**
    - signer/**
    - contract_api/**
  include:
    - node_modules/singularitynet-platform-contracts/**

functions:
  get_all_org:
    handler: registry.application.handlers.organization_handlers.get_all_org
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /org
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get all organizations"
            description: "Get all organizations data"
            tags:
              - "organization"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Organization Data"
                responseModels:
                  "application/json": "GetAllOrgOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  verify-org-id:
    handler: registry.application.handlers.organization_handlers.verify_org_id
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /org/verify
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Verify organization"
            description: "Verify organization"
            tags:
              - "organization"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "org_id"
                description: "Enter organization org_id"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Verified Data"
                responseModels:
                  "application/json": "VerifyOrganizationIdOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  get_groups_for_org:
    warmup: true
    handler: registry.application.handlers.organization_handlers.get_group_for_org
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /org/{org_uuid}/group
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-wit
          documentation:
            summary: "get group by organization"
            description: "get group by organization"
            tags:
              - "group"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "org_uuid"
                description: "Enter organization org_uuid"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Group Data"
                responseModels:
                  "application/json": "GetGroupsForOrgOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  create-org:
    warmup: true
    handler: registry.application.handlers.organization_handlers.create_organization
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /org/create
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Create organization"
            description: "Create organization"
            tags:
              - "organization"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "CreateOrgInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Organization Data"
                responseModels:
                  "application/json": "CreateOrgOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"


  update-org:
    warmup: true
    handler: registry.application.handlers.organization_handlers.update_org
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /org/{org_uuid}/update
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Update organization"
            description: "Update organization"
            tags:
              - "organization"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "org_uuid"
                description: "Enter org_uuid"
            requestModels:
              "application/json": "UpdateOrgInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Organization Data"
                responseModels:
                  "application/json": "UpdateOrgOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"


  org-verification:
    handler: registry.application.handlers.organization_handlers.org_verification
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}



  publish-org-ipfs:
    warmup: true
    handler: registry.application.handlers.organization_handlers.publish_org_on_ipfs
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /org/{org_uuid}/ipfs_publish
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Publish organization ipfs"
            description: "Publish organzation ipfs"
            tags:
              - "organization"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "org_uuid"
                description: "Enter org_uuid"
            requestModels:
              "application/json": "PublishOrgIpfsInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Organization Data"
                responseModels:
                  "application/json": "PublishOrgIpfsOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  save-org-transaction:
    warmup: true
    handler: registry.application.handlers.organization_handlers.save_transaction_hash_for_publish_org
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /org/{org_uuid}/transaction
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-wit
          documentation:
            summary: "Save organization transaction"
            description: "Save organization transaction for given org_uuid"
            tags:
              - "transaction"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "org_uuid"
                description: "Enter organization org_uuid"
            requestModels:
              "application/json": "SaveOrgTransactionsInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Group Data"
                responseModels:
                  "application/json": "SaveOrgTransactionsOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  get-member:
    warmup: true
    handler: registry.application.handlers.organization_handlers.get_member
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /org/{org_uuid}/member/{username}
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          request:
            parameters:
              paths:
                orgId: true
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get member by org_uuid and username"
            description: "Get member by given org_uuid and username"
            tags:
              - "member"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "org_uuid"
                description: "Enter organization org_uuid"
              - name: "username"
                description: "Enter username"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Group Data"
                responseModels:
                  "application/json": "GetMemberOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  get-all-members:
    warmup: true
    handler: registry.application.handlers.organization_handlers.get_all_members
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /org/{org_uuid}/member
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          request:
            parameters:
              paths:
                orgId: true
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get members by org_uuid"
            description: "Get members by given org_uuid"
            tags:
              - "member"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "org_uuid"
                description: "Enter organization org_uuid"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Group Data"
                responseModels:
                  "application/json": "GetAllMembersOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"



  invite-members:
    warmup: true
    handler: registry.application.handlers.organization_handlers.invite_members
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /org/{org_uuid}/member/invite
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          request:
            parameters:
              paths:
                orgId: true
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Invite members by org_uuid"
            description: "Invite members for given org_uuid "
            tags:
              - "member"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "org_uuid"
                description: "Enter organization org_uuid"
            requestModels:
              "application/json" : "InviteMembersInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Group Data"
                responseModels:
                  "application/json": "InviteMembersOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"


  verify-invite:
    warmup: true
    handler: registry.application.handlers.organization_handlers.verify_code
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /org/member/verify
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          request:
            parameters:
              paths:
                orgId: true
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Verify member"
            description: "Verify member"
            tags:
              - "member"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Group Data"
                responseModels:
                  "application/json": "VerifyInviteOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  register-member:
    warmup: true
    handler: registry.application.handlers.organization_handlers.register_member
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /org/member/register
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Register member"
            description: "Register member"
            tags:
              - "member"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "RegisterMemberInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "member data"
                responseModels:
                  "application/json": "RegisterMemberOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  publish-members:
    warmup: true
    handler: registry.application.handlers.organization_handlers.publish_members
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /org/{org_uuid}/member/publish
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          request:
            parameters:
              paths:
                orgId: true
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Publish member by org_uuid"
            description: "Publish member by given org_uuid"
            tags:
              - "member"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "org_uuid"
                description: "Enter org_uuid"
            requestModels:
              "application/json": "PublishMembersInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "member Data"
                responseModels:
                  "application/json": "PublishMembersOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  delete-members:
    warmup: true
    handler: registry.application.handlers.organization_handlers.delete_members
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /org/{org_uuid}/member/delete
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          request:
            parameters:
              paths:
                orgId: true
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Delete member by org_uuid"
            description: "Delete member by given org_uuid"
            tags:
              - "member"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "org_uuid"
                description: "Enter org_uuid"
            requestModels:
              "application/json": "DeleteMemberInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "member data"
                responseModels:
                  "application/json": "DeleteMemberOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  organization_event_consumer_handler:
    warmup: true
    handler: registry.application.handlers.consumer_handlers.organization_event_consumer_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}


  service_event_consumer_handler:
    warmup: true
    handler: registry.application.handlers.consumer_handlers.service_event_consumer_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  org-update-transaction:
    handler: registry.application.handlers.organization_handlers.update_transaction
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - schedule:
          rate: rate(10 minutes)

  verify-service-id:
    warmup: true
    handler: registry.application.handlers.service_handlers.verify_service_id
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /org/{org_uuid}/verify
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Verify service by org_uuid"
            description: "Verify service by given org_uuid"
            tags:
              - "service"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "org_uuid"
                description: "Enter org_uuid"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Service Data"
                responseModels:
                  "application/json": "VerifyServiceIdOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  create-service:
    warmup: true
    handler: registry.application.handlers.service_handlers.create_service
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /org/{org_uuid}/service
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Create service"
            description: "Create service by org_uuid"
            tags:
              - "service"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "org_uuid"
                description: "Enter org_uuid"
            requestModels:
              "application/json": "CreateServiceInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Service Data"
                responseModels:
                  "application/json": "CreateServiceOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  save-service:
    warmup: true
    handler: registry.application.handlers.service_handlers.save_service
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: PUT
          path: /org/{org_uuid}/service/{service_uuid}/save
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "save service by org_uuid and service_uuid"
            description: "save service by given org_uuid and service_uuid"
            tags:
              - "service"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "SaveServiceInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Service Data"
                responseModels:
                  "application/json": "SaveServiceOutput"
                pathParams:
                  - name: "org_uuid"
                    description: "Enter org_uuid"
                  - name: "service_uuid"
                    description: "Enter service_uuid"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  save-service-attributes:
    warmup: true
    handler: registry.application.handlers.service_handlers.save_service_attributes
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: PATCH
          path: /org/{org_uuid}/service/{service_uuid}/save
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "save service attribute by org_uuid and service_uuid"
            description: "save service attribute by given org_uuid and service_uuid"
            tags:
              - "service"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "org_uuid"
                description: "Enter org_uuid"
              - name: "service_uuid"
                description: "Enter service_uuid"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Service Data"
                responseModels:
                  "application/json": "SaveServiceAttributesOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  get-services-for-org:
    warmup: true
    handler: registry.application.handlers.service_handlers.get_services_for_organization
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /org/{org_uuid}/services
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "get services for org_uuid"
            description: "get services for given org_uuid"
            tags:
              - "service"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "org_uuid"
                description: "Enter org_uuid"
            requestModels:
              "application/json": "GetServicesForOrgInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Service Data"
                responseModels:
                  "application/json": "GetServicesForOrgOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  get-service-for-service-uuid:
    warmup: true
    handler: registry.application.handlers.service_handlers.get_service_for_service_uuid
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /org/{org_uuid}/service/{service_uuid}
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "get service by org_uuid and service_uuid"
            description: "get service by given org_uuid and service_uuid"
            tags:
              - "service"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "org_uuid"
                description: "Enter org_uuid"
              - name: "service_uuid"
                description: "Enter service_uuid"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Service Data"
                responseModels:
                  "application/json": "GetServiceForServiceUuidOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  publish-service-metadata-to-ipfs-hash:
    warmup: true
    handler: registry.application.handlers.service_handlers.publish_service_metadata_to_ipfs
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /org/{org_uuid}/service/{service_uuid}/ipfs_publish
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Publish service metadata by org_uuid and service_uuid "
            description: "Publish service metadata by given org_uuid and service_uuid"
            tags:
              - "service"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "org_uuid"
                description: "Enter org_uuid"
              - name: "service_uuid"
                description: "Enter service_uuid"
            requestModels:
              "application/json": "PublishServiceMetadataToIpfsHashInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Service Data"
                responseModels:
                  "application/json": "PublishServiceMetadataToIpfsHashOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"
  submit-service:
    warmup: true
    handler: registry.application.handlers.service_handlers.submit_service_for_approval
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: PUT
          path: /org/{org_uuid}/service/{service_uuid}/submit
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Submit service by org_uuid and service_uuid"
            description: "Submit service by given org_uuid and service_uuid "
            tags:
              - "service"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "org_uuid"
                description: "Enter org_uuid"
              - name: "service_uuid"
                description: "Enter service_uuid"
            requestModels:
              "application/json": "SubmitServiceInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Service Data"
                responseModels:
                  "application/json": "SubmitServiceOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"


  save_service_transaction:
    warmup: true
    handler: registry.application.handlers.service_handlers.save_transaction_hash_for_published_service
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /org/{org_uuid}/service/{service_uuid}/transaction
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Save service transaction by org_uuid and service_uuid"
            description: "Save service transaction by given org_uuid and service_uuid"
            tags:
              - "transaction"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "org_uuid"
                description: "Enter org_uuid"
              - name: "service_uuid"
                description: "Enter service_uuid"
            requestModels:
              "application/json": "SaveServiceTransactionInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Service Data"
                responseModels:
                  "application/json": "SaveServiceTransactionOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"


  daemon-config-for-given-network-id:
    warmup: true
    handler: registry.application.handlers.service_handlers.get_daemon_config_for_current_network
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /org/{org_uuid}/service/{service_uuid}/group/{group_id}/daemon/config
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get demon config by org_uuid and service_uuid and group_id"
            description: "Get demon config by given org_uuid and service_uuid and group_id"
            tags:
              - "demon"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "org_uuid"
                description: "Enter org_uuid"
              - name: "service_uuid"
                description: "Enter service_uuid"
              - name: "group_id"
                description: "Enter group_id"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Service Data"
                responseModels:
                  "application/json": "DemonConfigForGivenNetworkIdOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  file-delete:
    handler: registry.application.handlers.file_handlers.delete
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /file/delete
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Delete file"
            description: "Delete file"
            tags:
              - "file"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "FileDeleteInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Service Data"
                responseModels:
                  "application/json": "FileDeleteOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"


  get_service_details_using_org_id_service_id:
    warmup: true
    private: true
    handler: registry.application.handlers.service_handlers.get_service_details_using_org_id_service_id
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  service_deployment_status_notification_handler:
    warmup: true
    private: true
    handler: registry.application.handlers.service_handlers.service_deployment_status_notification_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  service-update-transaction:
    handler: registry.application.handlers.service_handlers.update_transaction
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - schedule:
          rate: rate(10 minutes)

  get-all-service-pending-for-approval:
    warmup: true
    handler: registry.application.handlers.slack_chat_operation_handler.get_list_of_service_pending_for_approval
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /services
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get all services pending for approval"
            description: "Get all services pending for approval"
            tags:
              - "service"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "GetAllServicePendingForApprovalInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Service Data"
                responseModels:
                  "application/json": "GetAllServicePendingForApprovalOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  slack-interaction-for-approval:
    warmup: true
    handler: registry.application.handlers.slack_chat_operation_handler.slack_interaction_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /slack/interaction/submit
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Slack interaction submit for approval"
            description: "Slack interaction submit for approval"
            tags:
              - "slack"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            responseModels:
              "apllication/json": "SlackInteractionForApprovalInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Service Data"
                responseModels:
                  "application/json": "SlackInteractionForApprovalOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  get-all-org-pending-for-approval:
    warmup: true
    handler: registry.application.handlers.slack_chat_operation_handler.get_list_of_org_pending_for_approval
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /orgs
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get all organizations pending for approval"
            description: "Get all organizations pending for approval"
            tags:
              - "slack"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "GetAllOrgPendingForApprovalInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "organization Data"
                responseModels:
                  "application/json": "GetAllOrgPendingForApprovalOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"
