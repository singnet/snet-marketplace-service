plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-plugin-tracing
  - serverless-prune-plugin
  - serverless-aws-documentation

service: dapp-user
custom:
  pythonRequirements:
    fileName: dapp_user/requirements.txt
    dockerizePip: true
    useDownloadCache: true
    useStaticCache: true
    cacheLocation: '/var/cache/serverless'
  prune:
    automatic: true
    includeLayers: true
    number: 2
  documentation:
    models:
      - name: "ErrorMessage"
        contentType: "application/json"
        schema: ${file(dapp_user/documentation/models/error.json)}
      - name: "GetUserPreferenceOutput"
        contentType: "application/json"
        schema: ${file(dapp_user/documentation/models/get_user_preference.json):GetUserPreferenceOutput}
      - name: "EnableDisableUserPreferenceOutput"
        contentType: "application/json"
        schema: ${file(dapp_user/documentation/models/enable_disable_user_preference.json):EnableDisableUserPreferenceOutput}
      - name: "EnableDisableUserPreferenceInput"
        contentType: "application/json"
        schema: ${file(dapp_user/documentation/models/enable_disable_user_preference.json):EnableDisableUserPreferenceInput}
      - name: "DappUserSignupOutput"
        contentType: "application/json"
        schema: ${file(dapp_user/documentation/models/dapp_user_signup_output.json):DappUserSignupOutput}
      - name: "DappUserGetProfileOutput"
        contentType: "application/json"
        schema: ${file(dapp_user/documentation/models/dapp_user_get_profile.json):DappUserGetProfileOutput}
      - name: "DappUserPostProfileOutput"
        contentType: "application/json"
        schema: ${file(dapp_user/documentation/models/dapp_user_post_profile.json):DappUserPostProfileOutput}
      - name: "DappUserPostProfileInput"
        contentType: "application/json"
        schema: ${file(dapp_user/documentation/models/dapp_user_post_profile.json):DappUserPostProfileInput}
      - name: "DappUserGetWalletOutput"
        contentType: "application/json"
        schema: ${file(dapp_user/documentation/models/dapp_user_get_wallet.json):DappUserGetWalletOutput}
      - name: "DappUserGetHealthOutput"
        contentType: "application/json"
        schema: ${file(dapp_user/documentation/models/dapp_user_get_health.json):DappUserGetHealthOutput}
      - name: "DappUserGetFeedbackOutput"
        contentType: "application/json"
        schema: ${file(dapp_user/documentation/models/dapp_user_get_feedback.json):DappUserGetFeedbackOutput}
      - name: "DappUserGetUsageFreeCallsOutput"
        contentType: "application/json"
        schema: ${file(dapp_user/documentation/models/dapp_user_get_usage_free_calls.json):DappUserGetUsageFreeCallsOutput}
      - name: "DappUserPostFeedbackOutput"
        contentType: "application/json"
        schema: ${file(dapp_user/documentation/models/dapp_user_post_feedback.json):DappUserPostFeedbackOutput}
      - name: "DappUserPostFeedbackInput"
        contentType: "application/json"
        schema: ${file(dapp_user/documentation/models/dapp_user_post_feedback.json):DappUserPostFeedbackInput}
      - name: "DappUserWalletRegisterOutput"
        contentType: "application/json"
        schema: ${file(dapp_user/documentation/models/dapp_user_wallet_register.json):DappUserWalletRegisterOutput}
      - name: "DappUserWalletRegisterInput"
        contentType: "application/json"
        schema: ${file(dapp_user/documentation/models/dapp_user_wallet_register.json):DappUserWalletRegisterInput}
      - name: "DeleteUserOutput"
        contentType: "application/json"
        schema: ${file(dapp_user/documentation/models/user_delete.json):DeleteUserOutput}
      - name: "DeleteUserInput"
        contentType: "application/json"
        schema: ${file(dapp_user/documentation/models/user_delete.json):DeleteUserInput}

provider:
  name: aws
  runtime: python3.7
  description: Dapp user service# optional, Description to publish to AWS
  memorySize: 128
  timeout: 30
  region: ${file(./config.${self:provider.stage}.json):REGION}
  stage: ${opt:stage,'dev'}
  deploymentBucket:
    name: snet-serverless-artifacts # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption
    tags: # Tags that will be added to each of the deployment resources
      key1: dapp-user
  deploymentPrefix: serverless
  tracing: true

package:
  exclude:
    - .circleci/**
    - .gitignore/**
    - .serverless/**
    - requirements.txt
    - venv/**
    - config.ropsten.json
    - sls_deploy.sh
    - dapp-users-serverless.yml
    - test/**
    - tests/**
    - sql_script/**
    - service_status/**
    - contract_api/**
    - repository/**
    - Readme.md
    - parse_events.sh
    - package.json
    - Dockerfile
    - License
    - log_setup.py
    - heath_check.sh
    - cli1/**
    - cli2/**
    - node_modules/**

functions:
  get-user-preference:
    warmup: true
    handler: dapp_user/application/handlers/user_handlers.get_user_preference
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /user/preference
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get user preference"
            description: "Get user preference"
            tags:
              - "user preference"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "User Data"
                responseModels:
                  "application/json": "GetUserPreferenceOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  enable-disable-user-preference:
    warmup: true
    handler: dapp_user/application/handlers/user_handlers.add_or_update_user_preference
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /user/preference
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Enable disable user preference"
            description: "Enable disable user preference"
            tags:
              - "user preference"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
                "application/json": "EnableDisableUserPreferenceInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "User Data"
                responseModels:
                  "application/json": "EnableDisableUserPreferenceOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"
  dapp-user:
    warmup: true
    handler: dapp_user/lambda_handler.request_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /signup
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "User profile signup"
            description: "User profile signup"
            tags:
              - "profile"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "application/json"
                responseModels:
                  "application/json": "DappUserSignupOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"
      - http:
          method: GET
          path: /profile
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get profile"
            description: "Get profile"
            tags:
              - "profile"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "application/json"
                responseModels:
                  "application/json": "DappUserGetProfileOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"
      - http:
          method: POST
          path: /profile
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Post profile"
            description: "Post profile"
            tags:
              - "profile"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "DappUserPostProfileInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "application/json"
                responseModels:
                  "application/json": "DappUserPostProfileOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"
      - http:
          method: GET
          path: /wallet
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get wallet"
            description: "Get Wallet"
            tags:
              - "wallet"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Wallet Data"
                responseModels:
                  "application/json": "DappUserGetWalletOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"


      - http:
          method: GET
          path: /health
          documentation:
            summary: "Get health"
            description: "Get health"
            tags:
              - "health"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            responseBody:
              description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Health Data"
                responseModels:
                  "application/json": "DappUserGetHealthOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"
      - http:
          method: GET
          path: /feedback
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get feedback"
            description: "Get feedback"
            tags:
              - "feedback"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            responseBody:
              description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Feedback Data"
                responseModels:
                  "application/json": "DappUserGetFeedbackOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"


      - http:
          path: /usage/freecalls
          method: get
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get usage freecalls"
            description: "Get usage freecalls"
            tags:
              - "freecalls"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            responseBody:
              description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Freecalls Data"
                responseModels:
                  "application/json": "DappUserGetUsageFreeCallsOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"
      - http:
          method: POST
          path: /feedback
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get Feedback"
            description: "Get Feedback"
            tags:
              - "feedback"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "DappUserPostFeedbackInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "application/json"
                responseModels:
                  "application/json": "DappUserPostFeedbackOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"
      - http:
          method: POST
          path: /wallet/register
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Register wallet"
            description: "Register wallet"
            tags:
              - "wallet"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
                "application/json": "DappUserWalletRegisterInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "application/json"
                responseModels:
                  "application/json": "DappUserWalletRegisterOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  delete-user:
    warmup: true
    handler: dapp_user/application/handlers/user_handlers.delete_user
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /user/delete
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Delete user"
            description: "Delete user"
            tags:
              - "user"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "DeleteUserInput"
            methodResponses:
              - statusCode: "200"
                responseModels:
                  "application/json": "DeleteUserOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  register-user-post-aws-cognito-signup:
    warmup: true
    handler: dapp_user/application/handlers/user_handlers.register_user_post_aws_cognito_signup
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
