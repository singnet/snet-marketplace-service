"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
from signer.stubs import state_service_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class PaymentChannelStateServiceStub:
    """PaymentChannelStateService contains methods to get the MultiPartyEscrow
    payment channel state.
    channel_id, channel_nonce, value and amount fields below in fact are
    Solidity uint256 values. Which are big-endian integers, see
    https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#formal-specification-of-the-encoding
    These values may be or may be not padded by zeros, service supports both
    options.
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetChannelState: grpc.UnaryUnaryMultiCallable[
        state_service_pb2.ChannelStateRequest,
        state_service_pb2.ChannelStateReply,
    ]
    """GetChannelState method returns a channel state by channel id."""

class PaymentChannelStateServiceAsyncStub:
    """PaymentChannelStateService contains methods to get the MultiPartyEscrow
    payment channel state.
    channel_id, channel_nonce, value and amount fields below in fact are
    Solidity uint256 values. Which are big-endian integers, see
    https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#formal-specification-of-the-encoding
    These values may be or may be not padded by zeros, service supports both
    options.
    """

    GetChannelState: grpc.aio.UnaryUnaryMultiCallable[
        state_service_pb2.ChannelStateRequest,
        state_service_pb2.ChannelStateReply,
    ]
    """GetChannelState method returns a channel state by channel id."""

class PaymentChannelStateServiceServicer(metaclass=abc.ABCMeta):
    """PaymentChannelStateService contains methods to get the MultiPartyEscrow
    payment channel state.
    channel_id, channel_nonce, value and amount fields below in fact are
    Solidity uint256 values. Which are big-endian integers, see
    https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#formal-specification-of-the-encoding
    These values may be or may be not padded by zeros, service supports both
    options.
    """

    @abc.abstractmethod
    def GetChannelState(
        self,
        request: state_service_pb2.ChannelStateRequest,
        context: _ServicerContext,
    ) -> typing.Union[state_service_pb2.ChannelStateReply, collections.abc.Awaitable[state_service_pb2.ChannelStateReply]]:
        """GetChannelState method returns a channel state by channel id."""

def add_PaymentChannelStateServiceServicer_to_server(servicer: PaymentChannelStateServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

class FreeCallStateServiceStub:
    """Used to determine free calls available for a given user."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetFreeCallsAvailable: grpc.UnaryUnaryMultiCallable[
        state_service_pb2.FreeCallStateRequest,
        state_service_pb2.FreeCallStateReply,
    ]

    GetFreeCallToken: grpc.UnaryUnaryMultiCallable[
        state_service_pb2.GetFreeCallTokenRequest,
        state_service_pb2.FreeCallToken,
    ]

class FreeCallStateServiceAsyncStub:
    """Used to determine free calls available for a given user."""

    GetFreeCallsAvailable: grpc.aio.UnaryUnaryMultiCallable[
        state_service_pb2.FreeCallStateRequest,
        state_service_pb2.FreeCallStateReply,
    ]

    GetFreeCallToken: grpc.aio.UnaryUnaryMultiCallable[
        state_service_pb2.GetFreeCallTokenRequest,
        state_service_pb2.FreeCallToken,
    ]

class FreeCallStateServiceServicer(metaclass=abc.ABCMeta):
    """Used to determine free calls available for a given user."""

    @abc.abstractmethod
    def GetFreeCallsAvailable(
        self,
        request: state_service_pb2.FreeCallStateRequest,
        context: _ServicerContext,
    ) -> typing.Union[state_service_pb2.FreeCallStateReply, collections.abc.Awaitable[state_service_pb2.FreeCallStateReply]]: ...

    @abc.abstractmethod
    def GetFreeCallToken(
        self,
        request: state_service_pb2.GetFreeCallTokenRequest,
        context: _ServicerContext,
    ) -> typing.Union[state_service_pb2.FreeCallToken, collections.abc.Awaitable[state_service_pb2.FreeCallToken]]: ...

def add_FreeCallStateServiceServicer_to_server(servicer: FreeCallStateServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
