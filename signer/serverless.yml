plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-plugin-tracing
  - serverless-prune-plugin
  - serverless-aws-documentation

service: signer
custom:
  pythonRequirements:
    fileName: signer/requirements.txt
    dockerizePip: true
    useDownloadCache: true
    useStaticCache: true
    cacheLocation: '/var/cache/serverless'
  prune:
    automatic: true
    includeLayers: true
    number: 2
  documentation:
    models:
      - name: "ErrorMessage"
        contentType: "application/json"
        schema: ${file(signer/documentation/models/error.json)}
      - name: "SignerInput"
        contentType: "application/json"
        schema: ${file(signer/documentation/models/signer.json):SignerInput}
      - name: "SignerOutput"
        contentType: "application/json"
        schema: ${file(signer/documentation/models/signer.json):SignerOutput}
      - name: "FreeCallTokenOutput"
        contentType: "application/json"
        schema: ${file(signer/documentation/models/free_call_token.json):FreeCallTokenOutput}
      - name: "FreeCallSignerAddressOutput"
        contentType: "application/json"
        schema: ${file(signer/documentation/models/free_call_signer_address.json):FreeCallSignerAddressOutput}
      - name: "RegularCallOutput"
        contentType: "application/json"
        schema: ${file(signer/documentation/models/regular_call.json):RegularCallOutput}
      - name: "RegularCallInput"
        contentType: "application/json"
        schema: ${file(signer/documentation/models/regular_call.json):RegularCallInput}
      - name: "StateServiceOutput"
        contentType: "application/json"
        schema: ${file(signer/documentation/models/state_service.json):StateServiceOutput}
      - name: "StateServiceInput"
        contentType: "application/json"
        schema: ${file(signer/documentation/models/state_service.json):StateServiceInput}
      - name: "OpenChannelForThirdPartyOutput"
        contentType: "application/json"
        schema: ${file(signer/documentation/models/open_channel_for_third_party.json):OpenChannelForThirdPartyOutput}
      - name: "OpenChannelForThirdPartyInput"
        contentType: "application/json"
        schema: ${file(signer/documentation/models/open_channel_for_third_party.json):OpenChannelForThirdPartyInput}

provider:
  name: aws
  runtime: python3.7
  description: Description of what the lambda function does # optional, Description to publish to AWS
  memorySize: 128
  timeout: 30
  region: ${file(./config.${self:provider.stage}.json):REGION}
  stage: ${opt:stage,'dev'}
  deploymentBucket:
    name: snet-serverless-artifacts # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption
    tags: # Tags that will be added to each of the deployment resources
      key1: signer
  deploymentPrefix: serverless
  versionFunctions: false
  tracing: true

package:
  exclude:
    - .circleci/**
    - .gitignore/**
    - .serverless/**
    - requirements.txt
    - venv/**
    - config.ropsten.json
    - sls_deploy.sh
    - serverless.yml
    - test/**
    - tests/**
    - sql_script/**
    - service_status/**
    - dapp_user/**
    - contract_api/**
    - repository/**
    - Readme.md
    - parse_events.sh
    - package.json
    - Dockerfile
    - License
    - log_setup.py
    - heath_check.sh

functions:
  signature-authenticator:
    warmup: true
    handler: signer/signature_authenticator.main
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  signer:
    warmup: true
    handler: signer/lambda_handler.request_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /free-call
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Post free call"
            description: "Post free call"
            tags:
              - "call"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
                "application/json": "SignerInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Signer Data"
                responseModels:
                  "application/json": "SignerOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"
      - http:
          method: POST
          path: /regular-call
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Post regular call"
            description: "Post regular call"
            tags:
              - "call"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "RegularCallInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Signer Data"
                responseModels:
                  "application/json": "RegularCallOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"
      - http:
          method: POST
          path: /state-service
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Post state-service"
            description: "Post state-service"
            tags:
              - "call"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "StateServiceInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Signer Data"
                responseModels:
                  "application/json": "StateServiceOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"
      - http:
          method: POST
          path: /open-channel-for-third-party
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Open channel for third party"
            description: "Open channel for third party"
            tags:
              - "call"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "OpenChannelForThirdPartyInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Signer Data"
                responseModels:
                  "application/json": "OpenChannelForThirdPartyOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  free_call_token:
    warmup: true
    handler: signer/lambda_handler.free_call_token_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /free-call/token
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get free call token"
            description: "Get free call token"
            tags:
              - "call"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Signer Data"
                responseModels:
                  "application/json": "FreeCallTokenOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"


  free-call-signer-address:
    warmup: true
    handler: signer/lambda_handler.get_free_call_signer_address
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /freecall/signer_address
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
          documentation:
            summary: "Get free call signer address"
            description: "Get free call signer address"
            tags:
              - "call"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Signer Data"
                responseModels:
                  "application/json": "FreeCallSignerAddressOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

  signature-to-get-freecall-from-daemon:
    warmup: true
    handler: signer/lambda_handler.signature_to_get_free_call_from_daemon_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
