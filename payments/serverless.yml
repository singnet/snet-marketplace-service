plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-plugin-tracing
  - serverless-prune-plugin
  - serverless-aws-documentation

service: payment-service
custom:
  pythonRequirements:
    fileName: payments/requirements.txt
    dockerizePip: true
    useDownloadCache: true
    useStaticCache: true
    cacheLocation: '/var/cache/serverless'
  prune:
    automatic: true
    includeLayers: true
    number: 2
  documentation:
    models:
      - name: "ErrorMessage"
        contentType: "application/json"
        schema: ${file(payments/documentation/models/error.json)}
      - name: "CreateOrderOutput"
        contentType: "application/json"
        schema: ${file(payments/documentation/models/create_order.json):CreateOrderOutput}
      - name: "CreateOrderInput"
        contentType: "application/json"
        schema: ${file(payments/documentation/models/create_order.json):CreateOrderInput}
      - name: "GetOrderFromOrderIdOutput"
        contentType: "application/json"
        schema: ${file(payments/documentation/models/get_order_from_order_id.json):GetOrderFromOrderIdOutput}
      - name: "InitiatePaymentOutput"
        contentType: "application/json"
        schema: ${file(payments/documentation/models/initiate_payment.json):InitiatePaymentOutput}
      - name: "InitiatePaymentInput"
        contentType: "application/json"
        schema: ${file(payments/documentation/models/initiate_payment.json):InitiatePaymentInput}
      - name: "ExecutePaymentOutput"
        contentType: "application/json"
        schema: ${file(payments/documentation/models/execute_payment.json):ExecutePaymentOutput}
      - name: "ExecutePaymentInput"
        contentType: "application/json"
        schema: ${file(payments/documentation/models/execute_payment.json):ExecutePaymentInput}
      - name: "GetOrderDetailsFromUserOutput"
        contentType: "application/json"
        schema: ${file(payments/documentation/models/get_order_details_from_user.json):GetOrderDetailsFromUserOutput}
      - name: "CancelPaymentOutput"
        contentType: "application/json"
        schema: ${file(payments/documentation/models/cancel_payment.json):CancelPaymentOutput}
      - name: "CancelPaymentInput"
        contentType: "application/json"
        schema: ${file(payments/documentation/models/cancel_payment.json):CancelPaymentInput}


provider:
  name: aws
  runtime: python3.7
  description: Payment Service #optional, Description to publish to AWS
  memorySize: 512
  timeout: 60
  region: ${file(./config.${self:provider.stage}.json):REGION}
  stage: ${opt:stage,'dev'}
  deploymentBucket:
    name: snet-serverless-artifacts # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption
    tags: # Tags that will be added to each of the deployment resources
      key1: payment-service
  deploymentPrefix: serverless
  tracing: true

package:
  exclude:
    - .circleci/**
    - .gitignore/**
    - .serverless/**
    - requirements.txt
    - venv/**
    - config.ropsten.json
    - sls_deploy.sh
    - dapp-users-serverless.yml
    - test/**
    - tests/**
    - sql_script/**
    - service_status/**
    - contract_api/**
    - repository/**
    - Readme.md
    - parse_events.sh
    - package.json
    - Dockerfile
    - License
    - log_setup.py
    - heath_check.sh
    - cli1/**
    - cli2/**
    - node_modules/**
    - dapp_user/**

functions:
  create-order:
    handler: payments/handlers/order_handler.create
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    events:
      - http:
          path: order/create
          method: post
          private: true
          documentation:
            summary: "Create order"
            description: "Create order"
            tags:
              - "order"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            requestModels:
              "application/json": "CreateOrderInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Order Data"
                responseModels:
                  "application/json": "CreateOrderOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}


  get-order-from-order-id:
    handler: payments/handlers/order_handler.get_order_from_order_id
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    events:
      - http:
          path: order/{order_id}
          method: get
          private: true
          documentation:
            summary: "Create order by order_id"
            description: "Create order from given order_id"
            tags:
              - "order"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "order_id"
                description: "Enter order_id"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Order Data"
                responseModels:
                  "application/json": "GetOrderFromOrderIdOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  initiate-payment:
    handler: payments/handlers/payment_handler.initiate
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    events:
      - http:
          path: order/{order_id}/payment/initiate
          method: post
          private: true
          documentation:
            summary: "Initiate payment by order_id"
            description: "Initiate payment from given order_id"
            tags:
              - "payment"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "order_id"
                description: "Enter order_id"
            requestModels:
              "application/json": "InitiatePaymentInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Order Data"
                responseModels:
                  "application/json": "InitiatePaymentOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  execute-payment:
    handler: payments/handlers/payment_handler.execute
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    events:
      - http:
          path: order/{order_id}/payment/{payment_id}/execute
          method: post
          private: true
          documentation:
            summary: "Execute payment by order_id and payment_id"
            description: "Execute payment from given order_id and payment_id"
            tags:
              - "payment"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "order_id"
                description: "Enter order_id"
              - name: "payment_id"
                description: "Enter payment_id"
            requestModels:
              "application/json": "ExecutePaymentInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Order Data"
                responseModels:
                  "application/json": "ExecutePaymentOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  cancel-payment:
    handler: payments/handlers/payment_handler.cancel
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    events:
      - http:
          path: order/{order_id}/payment/{payment_id}/cancel
          method: post
          private: true
          documentation:
            summary: "Cancel payment by order_id and payment_id"
            description: "Cancel payment from given order_id and payment_id"
            tags:
              - "payment"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            pathParams:
              - name: "order_id"
                description: "Enter order_id"
              - name: "payment_id"
                description: "Enter payment_id"
            requestModels:
              "application/json": "CancelPaymentInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Order Data"
                responseModels:
                  "application/json": "CancelPaymentOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"

    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  get-order-details-from-user:
    handler: payments/handlers/order_handler.get_order_details_for_user
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    events:
      - http:
          path: order
          method: get
          private: true
          documentation:
            summary: "Get order details from user"
            description: "Get order details from user"
            tags:
              - "order"
            requestHeaders:
              - name: "Content-Type"
                description: "application/json"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Order Data"
                responseModels:
                  "application/json": "GetOrderDetailsFromUserOutput"
              - statusCode: "500"
                responseModels:
                  "application/json": "ErrorMessage"
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
